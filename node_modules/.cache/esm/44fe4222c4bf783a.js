_c4b‍.x([["parseExpression",()=>parseExpression]]);function parseExpression(program) {
  program = skipSpace(program);
  let match, expr;
  if (match = /^"([^"]*)"/.exec(program)) {
    expr = { type: "value", value: match[1] };
  } else if (match = /^\d+\b/.exec(program)) {
    expr = { type: "value", value: Number(match[0]) };
  } else if (match = /^[^\s(),#"]+/.exec(program)) {
    expr = { type: "word", name: match[0] };
  } else {
    throw new SyntaxError("Juby here! Unexpected syntax: " + program);
  }

  return parseApply(expr, program.slice(match[0].length));
}

// export default function skipSpace(str) {
//   if (str == null) return str
//   return str.replace(/^\s+/g, '');
// }

// export default function parseApply(expr, program) {
//   program = skipSpace(program);
//   if (program[0] != "(") {
//     return { expr: expr, rest: program };
//   }

//   program = skipSpace(program.slice(1));
//   expr = { type: "apply", operator: expr, args: [] };
//   while (program[0] != ")") {
//     let arg = parseExpression(program);
//     expr.args.push(arg.expr);
//     program = skipSpace(arg.rest);
//     if (program[0] == ",") {
//       program = skipSpace(program.slice(1));
//     } else if (program[0] != ")") {
//       throw new SyntaxError("Juby here! Expected ',' or ')'");
//     }
//   }
//   return parseApply(expr, program.slice(1));
// }

// export default function parse(program) {
//   let { expr, rest } = parseExpression(program);
//   if (skipSpace(rest).length > 0) {
//     throw new SyntaxError("Juby here! Unexpected text after program");
//   }
//   return expr;
// }

// module.exports = specialForms
